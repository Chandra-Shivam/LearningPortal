@using ElearningPortal.DbContext
@using ElearningPortal.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@attribute [Authorize(Roles = "User")]

@page "/dashboard"

@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>My Courses</h3>

@if (enrollments == null || !enrollments.Any())
{
    <p>No courses enrolled.</p>
}
else
{
    <ul>
        @foreach (var enrollment in enrollments)
        {
            <div class="col-md-4">
                <h4>@enrollment.Course.Title</h4>
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="form-group">
                            @enrollment.Course.Description
                        </div>

                        <div class="form-group">
                            <iframe width="100%" height="200" src="@enrollment.Course.VideoUrl" frameborder="0"
                                allowfullscreen></iframe>
                        </div>
                        <div>
                            <button type="button" class="form-control btn-secondary"
                                @onclick="@(() => NavigationManager.NavigateTo($"/coursequiz/{enrollment.Course.Id}"))">Take Quiz</button>
                        </div>
                    </div>
                </div>
            </div>

        }
    </ul>
}

@code {
    private List<Enrollment> enrollments;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        enrollments = await DbContext.Enrollments
        .Where(e => e.UserId == user.Id)
        .Include(e => e.Course)
        .ToListAsync();
    }
}
