@page "/login"

@using ElearningPortal.Models
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="Login">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
    </div>
    <div class="form-group mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>


@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="text-danger">@errorMessage</div>
}

@code {
    [SupplyParameterFromForm]
    LoginModel loginModel { get; set; } = new LoginModel();
    private string? errorMessage;
    private string? ReturnUrl;
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("ReturnUrl", out var returnUrl))
        {
            ReturnUrl = returnUrl;
        }
    }

    private async Task HandleLogin()
    {
        var result = await SignInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, isPersistent: false,
        lockoutOnFailure: false);
        if (result.Succeeded)
        {
            if (!string.IsNullOrEmpty(ReturnUrl))
            {
                NavigationManager.NavigateTo(ReturnUrl, forceLoad: true);
            }
            else
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
        else
        {
            errorMessage = "Invalid login attempt.";
        }
    }
}
