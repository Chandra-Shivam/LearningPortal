@page "/register"
@using ElearningPortal.Models
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="HandleRegister" FormName="Register">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control"
            @bind-Value="registerModel.ConfirmPassword" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="text-danger">@errorMessage</div>
}

@code {

    [SupplyParameterFromForm]
    private RegisterModel registerModel { get; set; } = new RegisterModel()
    {
        Email = "",
        Password = "",
        ConfirmPassword = ""
    };
    private string? errorMessage;

    private async Task HandleRegister()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            // Handle password mismatch
            return;
        }

        var user = new ApplicationUser { UserName = registerModel.Email, Email = registerModel.Email };
        var result = await UserManager.CreateAsync(user, registerModel.Password);

        if (result.Succeeded)
        {
            await UserManager.AddToRoleAsync(user, "User"); // Assign default role
            await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo("/dashboard");
        }
        else
        {
            // Handle registration errors
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    public class RegisterModel
    {
        [Required]
        [EmailAddress]
        public required string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public required string Password { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public required string ConfirmPassword { get; set; }
    }
}